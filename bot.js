const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
require("dotenv").config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userNames[chatId] = msg.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

  bot.sendMessage(chatId, "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Wybierz jƒôzyk:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data: "set_lang_ua" }],
        [{ text: "üáµüá± Polski", callback_data: "set_lang_pl" }],
      ],
    },
  });
});
const appointments = {}; // chatId -> { date, time }
const appointmentsByDateTime = {}; // 'YYYY-MM-DD_HH:MM' -> chatId
const pendingAppointments = {}; // chatId -> { date }
const userNames = {}; // chatId -> —ñ–º'—è
const userLangs = {}; // chatId -> 'ua' | 'pl'

// ======= –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–Ø =======
const texts = {
  ua: {
    chooseAction: "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
    book: "üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å",
    view: "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å",
    cancel: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å",
    all: "üìñ –í—Å—ñ –∑–∞–ø–∏—Å–∏",
    noRecord: "‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ñ.",
    enterTime: (date) => `üïê –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è ${date} —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM`,
    yourRecord: ({ date, time }) => `üìÖ –í–∞—à –∑–∞–ø–∏—Å:\n${date} –æ ${time}`,
    canceled: "‚úÖ –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
    nothingToCancel: "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—É.",
    booked: (date, time) => `‚úÖ –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ ${date} –æ ${time}.`,
    alreadyTaken: "‚ùå –¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π.",
    wrongFormat: "‚õîÔ∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤—ñ—Ä–Ω–∏–π. –ü—Ä–∏–∫–ª–∞–¥: 14:30",
    reminder: (date, time) =>
      `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞–≤—Ç—Ä–∞ (${date}) —É –≤–∞—Å –∑–∞–ø–∏—Å –æ ${time}.`,
    allRecords: "üìñ –£—Å—ñ –∑–∞–ø–∏—Å–∏:",
    noAppointments: "‚ÑπÔ∏è –ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.",
    languageSet: "‚úÖ –ú–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶",
    selectDate: "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
    changeLang: "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
  },
  pl: {
    chooseAction: "Wybierz dzia≈Çanie:",
    book: "üìù Um√≥w siƒô",
    view: "üìã Zobacz spotkanie",
    cancel: "‚ùå Anuluj spotkanie",
    all: "üìñ Wszystkie spotkania",
    noRecord: "‚ÑπÔ∏è Nie masz jeszcze spotkania.",
    enterTime: (date) => `üïê Podaj godzinƒô dla ${date} (format HH:MM)`,
    yourRecord: ({ date, time }) => `üìÖ Twoje spotkanie:\n${date} o ${time}`,
    canceled: "‚úÖ Spotkanie anulowane.",
    nothingToCancel: "‚ÑπÔ∏è Nie masz spotkania.",
    booked: (date, time) => `‚úÖ Um√≥wiono na ${date} o ${time}.`,
    alreadyTaken: "‚ùå Ta godzina jest zajƒôta.",
    wrongFormat: "‚õîÔ∏è B≈Çƒôdny format. Przyk≈Çad: 14:30",
    reminder: (date, time) =>
      `üîî Przypomnienie: jutro (${date}) masz spotkanie o ${time}.`,
    allRecords: "üìñ Wszystkie spotkania:",
    noAppointments: "‚ÑπÔ∏è Brak zapis√≥w.",
    languageSet: "‚úÖ Ustawiono jƒôzyk: Polski üáµüá±",
    selectDate: "üìÖ Wybierz datƒô:",
    changeLang: "üåê Zmie≈Ñ jƒôzyk",
  },
};

function getText(chatId, key, ...args) {
  const lang = userLangs[chatId] || "ua";
  const t = texts[lang][key];
  return typeof t === "function" ? t(...args) : t;
}

// === –ö–ù–û–ü–ö–ê –ó–ú–Ü–ù–ò –ú–û–í–ò ===
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === "set_lang_ua" || data === "set_lang_pl") {
    const lang = data === "set_lang_ua" ? "ua" : "pl";
    userLangs[chatId] = lang;
    bot.sendMessage(chatId, getText(chatId, "languageSet"));
    showMainMenu(chatId);
    return bot.answerCallbackQuery(query.id);
  }
});

// === –ú–ï–ù–Æ ===
function showMainMenu(chatId) {
  const buttons = [
    [{ text: getText(chatId, "book"), callback_data: "book" }],
    [{ text: getText(chatId, "view"), callback_data: "view" }],
    [{ text: getText(chatId, "cancel"), callback_data: "cancel" }],
    [{ text: getText(chatId, "changeLang"), callback_data: "lang" }],
  ];

  if (chatId.toString() === process.env.WIFE_CHAT_ID) {
    buttons.push([
      { text: getText(chatId, "all"), callback_data: "all_records" },
    ]);
  }

  bot.sendMessage(chatId, getText(chatId, "chooseAction"), {
    reply_markup: { inline_keyboard: buttons },
  });
}

// === –ö–ù–û–ü–ö–ò –ö–ê–õ–ï–ù–î–ê–†–Ø ===
function generateDateKeyboardGrid(chatId) {
  const keyboard = [];
  const today = new Date();
  const weekdaysUA = ["–ù–¥", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"];
  const weekdaysPL = ["Nd", "Pn", "Wt", "≈ör", "Cz", "Pt", "Sb"];
  const monthsUA = [
    "—Å—ñ—á",
    "–ª—é—Ç",
    "–±–µ—Ä",
    "–∫–≤—ñ—Ç",
    "—Ç—Ä–∞–≤",
    "—á–µ—Ä–≤",
    "–ª–∏–ø",
    "—Å–µ—Ä",
    "–≤–µ—Ä",
    "–∂–æ–≤—Ç",
    "–ª–∏—Å—Ç",
    "–≥—Ä—É–¥",
  ];
  const monthsPL = [
    "sty",
    "lut",
    "mar",
    "kwi",
    "maj",
    "cze",
    "lip",
    "sie",
    "wrz",
    "pa≈∫",
    "lis",
    "gru",
  ];

  const lang = userLangs[chatId] || "ua";
  const weekdays = lang === "pl" ? weekdaysPL : weekdaysUA;
  const months = lang === "pl" ? monthsPL : monthsUA;

  for (let i = 0; i < 5; i++) {
    const row = [];
    for (let j = 0; j < 4; j++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i * 4 + j);
      const yyyy_mm_dd = date.toISOString().split("T")[0];
      const weekday = weekdays[date.getDay()];
      const day = date.getDate().toString().padStart(2, "0");
      const month = months[date.getMonth()];
      row.push({
        text: `${day} ${weekday} ${month}`,
        callback_data: `date_${yyyy_mm_dd}`,
      });
    }
    keyboard.push(row);
  }

  return { inline_keyboard: keyboard };
}

// === –û–ë–†–û–ë–ö–ê CALLBACK –î–Ü–ô ===
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const action = query.data;
  userNames[chatId] = query.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

  if (action === "book") {
    bot.sendMessage(chatId, getText(chatId, "selectDate"), {
      reply_markup: generateDateKeyboardGrid(chatId),
    });
  }

  if (action.startsWith("date_")) {
    const selectedDate = action.split("_")[1];
    pendingAppointments[chatId] = { date: selectedDate };
    bot.sendMessage(chatId, getText(chatId, "enterTime", selectedDate));
  }

  if (action === "view") {
    const record = appointments[chatId];
    if (record) {
      bot.sendMessage(chatId, getText(chatId, "yourRecord", record));
    } else {
      bot.sendMessage(chatId, getText(chatId, "noRecord"));
    }
  }

  if (action === "cancel") {
    const record = appointments[chatId];
    if (record) {
      delete appointmentsByDateTime[`${record.date}_${record.time}`];
      delete appointments[chatId];
      bot.sendMessage(chatId, getText(chatId, "canceled"));
    } else {
      bot.sendMessage(chatId, getText(chatId, "nothingToCancel"));
    }
  }

  if (
    action === "all_records" &&
    chatId.toString() === process.env.WIFE_CHAT_ID
  ) {
    const entries = Object.entries(appointments);
    if (!entries.length) {
      bot.sendMessage(chatId, getText(chatId, "noAppointments"));
    } else {
      const list = entries
        .map(([id, { date, time }]) => {
          const name = userNames[id] || `ID ${id}`;
          return `üë§ ${name}\nüìÖ ${date} ‚è∞ ${time}`;
        })
        .join("\n\n");
      bot.sendMessage(chatId, `${getText(chatId, "allRecords")}\n\n${list}`);
    }
  }

  if (action === "lang") {
    bot.sendMessage(chatId, "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Wybierz jƒôzyk:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data: "set_lang_ua" }],
          [{ text: "üáµüá± Polski", callback_data: "set_lang_pl" }],
        ],
      },
    });
  }

  bot.answerCallbackQuery(query.id);
});

// === –û–ë–†–û–ë–ö–ê –¢–ï–ö–°–¢–£ ===
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  if (!msg.text || msg.text.startsWith("/")) return;

  userNames[chatId] = msg.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

  if (pendingAppointments[chatId]) {
    const time = msg.text.trim();
    const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;

    if (!timeRegex.test(time)) {
      return bot.sendMessage(chatId, getText(chatId, "wrongFormat"));
    }

    const { date } = pendingAppointments[chatId];
    const key = `${date}_${time}`;

    if (appointmentsByDateTime[key]) {
      return bot.sendMessage(chatId, getText(chatId, "alreadyTaken"));
    }

    appointments[chatId] = { date, time };
    appointmentsByDateTime[key] = chatId;

    bot.sendMessage(chatId, getText(chatId, "booked", date, time));
    bot.sendMessage(
      process.env.WIFE_CHAT_ID,
      `üì¢ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å: ${userNames[chatId]}\nüìÖ ${date} ‚è∞ ${time}`
    );

    delete pendingAppointments[chatId];
  } else {
    showMainMenu(chatId);
  }
});

// === –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –û 12:00 ===
cron.schedule("0 12 * * *", () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const yyyy_mm_dd = tomorrow.toISOString().split("T")[0];

  for (const [chatId, { date, time }] of Object.entries(appointments)) {
    if (date === yyyy_mm_dd) {
      bot.sendMessage(chatId, getText(chatId, "reminder", date, time));
    }
  }
});
