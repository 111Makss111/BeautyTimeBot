const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
require("dotenv").config();
const http = require("http");
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const appointments = {}; // chatId -> { date, time }
const appointmentsByDateTime = {}; // 'YYYY-MM-DD_HH:MM' -> chatId
const pendingAppointments = {}; // chatId -> { date }
const userNames = {}; // chatId -> —ñ–º'—è
const userLangs = {}; // chatId -> 'ua' | 'pl'
const blockedDates = new Set();

// ======= –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–Ø =======
const texts = {
  ua: {
    chooseAction: "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
    book: "üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å",
    wifeBook: "‚õîÔ∏è –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –¥–∞—Ç—É",
    view: "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å",
    cancel: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å",
    all: "üìñ –í—Å—ñ –∑–∞–ø–∏—Å–∏",
    noRecord: "‚ÑπÔ∏è –í–∏ —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ñ.",
    enterTime: (date) => `üïê –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è ${date} —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM`,
    yourRecord: ({ date, time }) => `üìÖ –í–∞—à –∑–∞–ø–∏—Å:\n${date} –æ ${time}`,
    canceled: "‚úÖ –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
    nothingToCancel: "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—É.",
    booked: (date, time) => `‚úÖ –í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ ${date} –æ ${time}.`,
    alreadyTaken: "‚ùå –¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π.",
    wrongFormat: "‚õîÔ∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤—ñ—Ä–Ω–∏–π. –ü—Ä–∏–∫–ª–∞–¥: 14:30",
    reminder: (date, time) =>
      `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞–≤—Ç—Ä–∞ (${date}) —É –≤–∞—Å –∑–∞–ø–∏—Å –æ ${time}.`,
    allRecords: "üìñ –£—Å—ñ –∑–∞–ø–∏—Å–∏:",
    noAppointments: "‚ÑπÔ∏è –ó–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î.",
    languageSet: "‚úÖ –ú–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶",
    selectDate: "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
    changeLang: "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
    blocked: (date) => `‚õîÔ∏è –î–∞—Ç–∞ ${date} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞.`,
  },
  pl: {
    chooseAction: "Wybierz dzia≈Çanie:",
    book: "üìù Um√≥w siƒô",
    wifeBook: "‚õîÔ∏è Zablokuj datƒô",
    view: "üìã Zobacz spotkanie",
    cancel: "‚ùå Anuluj spotkanie",
    all: "üìñ Wszystkie spotkania",
    noRecord: "‚ÑπÔ∏è Nie masz jeszcze spotkania.",
    enterTime: (date) => `üïê Podaj godzinƒô dla ${date} (format HH:MM)`,
    yourRecord: ({ date, time }) => `üìÖ Twoje spotkanie:\n${date} o ${time}`,
    canceled: "‚úÖ Spotkanie anulowane.",
    nothingToCancel: "‚ÑπÔ∏è Nie masz spotkania.",
    booked: (date, time) => `‚úÖ Um√≥wiono na ${date} o ${time}.`,
    alreadyTaken: "‚ùå Ta godzina jest zajƒôta.",
    wrongFormat: "‚õîÔ∏è B≈Çƒôdny format. Przyk≈Çad: 14:30",
    reminder: (date, time) =>
      `üîî Przypomnienie: jutro (${date}) masz spotkanie o ${time}.`,
    allRecords: "üìñ Wszystkie spotkania:",
    noAppointments: "‚ÑπÔ∏è Brak zapis√≥w.",
    languageSet: "‚úÖ Ustawiono jƒôzyk: Polski üáµüá±",
    selectDate: "üìÖ Wybierz datƒô:",
    changeLang: "üåê Zmie≈Ñ jƒôzyk",
    blocked: (date) => `‚õîÔ∏è Data ${date} zosta≈Ça zablokowana.`,
  },
};

function getText(chatId, key, ...args) {
  const lang = userLangs[chatId] || "ua";
  const t =
    texts[lang][
      chatId.toString() === process.env.WIFE_CHAT_ID && key === "book"
        ? "wifeBook"
        : key
    ];
  return typeof t === "function" ? t(...args) : t;
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userNames[chatId] = msg.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

  bot.sendMessage(chatId, "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Wybierz jƒôzyk:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data: "set_lang_ua" }],
        [{ text: "üáµüá± Polski", callback_data: "set_lang_pl" }],
      ],
    },
  });
});

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  userNames[chatId] = query.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";

  if (data === "set_lang_ua" || data === "set_lang_pl") {
    const lang = data === "set_lang_ua" ? "ua" : "pl";
    userLangs[chatId] = lang;
    bot.sendMessage(chatId, getText(chatId, "languageSet"));
    showMainMenu(chatId);
    return bot.answerCallbackQuery(query.id);
  }

  if (data.startsWith("date_")) {
    const date = data.split("_")[1];

    if (
      chatId.toString() === process.env.WIFE_CHAT_ID &&
      query.message.text.includes(getText(chatId, "selectDate"))
    ) {
      if (blockedDates.has(date)) blockedDates.delete(date);
      else blockedDates.add(date);
      return bot.sendMessage(chatId, getText(chatId, "blocked", date));
    }

    if (blockedDates.has(date)) {
      return bot.sendMessage(chatId, "‚õîÔ∏è –¶—è –¥–∞—Ç–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞.");
    }

    pendingAppointments[chatId] = { date };
    return bot.sendMessage(chatId, getText(chatId, "enterTime", date));
  }

  return bot.answerCallbackQuery(query.id);
});

function showMainMenu(chatId) {
  const buttons = [
    [getText(chatId, "book"), getText(chatId, "view")],
    [getText(chatId, "cancel"), getText(chatId, "changeLang")],
  ];

  if (chatId.toString() === process.env.WIFE_CHAT_ID) {
    buttons.push([getText(chatId, "all")]);
  }

  bot.sendMessage(chatId, getText(chatId, "chooseAction"), {
    reply_markup: {
      keyboard: buttons,
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
}

function generateDateKeyboardGrid(chatId) {
  const keyboard = [];
  const today = new Date();
  const weekdaysUA = ["–ù–¥", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"];
  const weekdaysPL = ["Nd", "Pn", "Wt", "≈ör", "Cz", "Pt", "Sb"];
  const monthsUA = [
    "—Å—ñ—á",
    "–ª—é—Ç",
    "–±–µ—Ä",
    "–∫–≤—ñ—Ç",
    "—Ç—Ä–∞–≤",
    "—á–µ—Ä–≤",
    "–ª–∏–ø",
    "—Å–µ—Ä",
    "–≤–µ—Ä",
    "–∂–æ–≤—Ç",
    "–ª–∏—Å—Ç",
    "–≥—Ä—É–¥",
  ];
  const monthsPL = [
    "sty",
    "lut",
    "mar",
    "kwi",
    "maj",
    "cze",
    "lip",
    "sie",
    "wrz",
    "pa≈∫",
    "lis",
    "gru",
  ];

  const lang = userLangs[chatId] || "ua";
  const weekdays = lang === "pl" ? weekdaysPL : weekdaysUA;
  const months = lang === "pl" ? monthsPL : monthsUA;

  for (let i = 0; i < 5; i++) {
    const row = [];
    for (let j = 0; j < 4; j++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i * 4 + j);
      const yyyy_mm_dd = date.toISOString().split("T")[0];
      const weekday = weekdays[date.getDay()];
      const day = date.getDate().toString().padStart(2, "0");
      const month = months[date.getMonth()];
      row.push({
        text: `${day} ${weekday} ${month}`,
        callback_data: `date_${yyyy_mm_dd}`,
      });
    }
    keyboard.push(row);
  }

  return { inline_keyboard: keyboard };
}

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  if (!msg.text || msg.text.startsWith("/")) return;

  userNames[chatId] = msg.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
  const text = msg.text.trim();

  if (text === getText(chatId, "book")) {
    return bot.sendMessage(chatId, getText(chatId, "selectDate"), {
      reply_markup: generateDateKeyboardGrid(chatId),
    });
  }

  if (text === getText(chatId, "view")) {
    const record = appointments[chatId];
    return bot.sendMessage(
      chatId,
      record
        ? getText(chatId, "yourRecord", record)
        : getText(chatId, "noRecord")
    );
  }

  if (text === getText(chatId, "cancel")) {
    const record = appointments[chatId];
    if (record) {
      delete appointmentsByDateTime[`${record.date}_${record.time}`];
      delete appointments[chatId];
      return bot.sendMessage(chatId, getText(chatId, "canceled"));
    } else {
      return bot.sendMessage(chatId, getText(chatId, "nothingToCancel"));
    }
  }

  if (text === getText(chatId, "changeLang")) {
    return bot.sendMessage(chatId, "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Wybierz jƒôzyk:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data: "set_lang_ua" }],
          [{ text: "üáµüá± Polski", callback_data: "set_lang_pl" }],
        ],
      },
    });
  }

  if (
    text === getText(chatId, "all") &&
    chatId.toString() === process.env.WIFE_CHAT_ID
  ) {
    const entries = Object.entries(appointments);
    if (!entries.length) {
      return bot.sendMessage(chatId, getText(chatId, "noAppointments"));
    } else {
      const list = entries
        .map(([id, { date, time }]) => {
          const name = userNames[id] || `ID ${id}`;
          return `üë§ ${name}\nüìÖ ${date} ‚è∞ ${time}`;
        })
        .join("\n\n");
      return bot.sendMessage(
        chatId,
        `${getText(chatId, "allRecords")}\n\n${list}`
      );
    }
  }

  if (pendingAppointments[chatId]) {
    const time = text;
    const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;

    if (!timeRegex.test(time)) {
      return bot.sendMessage(chatId, getText(chatId, "wrongFormat"));
    }

    const { date } = pendingAppointments[chatId];
    const key = `${date}_${time}`;
    if (appointmentsByDateTime[key]) {
      return bot.sendMessage(chatId, getText(chatId, "alreadyTaken"));
    }

    appointments[chatId] = { date, time };
    appointmentsByDateTime[key] = chatId;

    bot.sendMessage(chatId, getText(chatId, "booked", date, time));
    bot.sendMessage(
      process.env.WIFE_CHAT_ID,
      `üì¢ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å: ${userNames[chatId]}\nüìÖ ${date} ‚è∞ ${time}`
    );

    delete pendingAppointments[chatId];
  } else {
    showMainMenu(chatId);
  }
});

cron.schedule("0 12 * * *", () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const yyyy_mm_dd = tomorrow.toISOString().split("T")[0];

  for (const [chatId, { date, time }] of Object.entries(appointments)) {
    if (date === yyyy_mm_dd) {
      bot.sendMessage(chatId, getText(chatId, "reminder", date, time));
    }
  }
});
bot.onText(/\/book/, (msg) => {
  const chatId = msg.chat.id; // –û—Ç—Ä–∏–º—É—î–º–æ chatId –∑ –æ–±'—î–∫—Ç–∞ msg
  const text = msg.text.trim(); // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –∑–∞–ø–∏—Å—É
  const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/;

  if (pendingAppointments[chatId]) {
    // –¢–µ–ø–µ—Ä chatId —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π
    const time = text;

    if (!timeRegex.test(time)) {
      return bot.sendMessage(chatId, getText(chatId, "wrongFormat"));
    }

    const { date } = pendingAppointments[chatId];
    const key = `${date}_${time}`;

    if (!isTimeAvailable(date, time)) {
      return bot.sendMessage(chatId, getText(chatId, "alreadyTaken"));
    }

    // –Ø–∫—â–æ —á–∞—Å —Ä–∞–Ω—ñ—à–µ –Ω—ñ–∂ 09:00 ‚Äî –∑–∞–ø–∏—Ç –¥–æ –¥—Ä—É–∂–∏–Ω–∏
    const [hours] = time.split(":").map(Number);
    if (hours < 9) {
      const confirmId = `${chatId}_${date}_${time}`;
      pendingConfirmations[confirmId] = { chatId, date, time };

      bot.sendMessage(
        process.env.WIFE_CHAT_ID,
        `‚ùì –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ ${userNames[chatId]} –Ω–∞ ${date} –æ ${time}.\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å?`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –¢–∞–∫", callback_data: `confirm_yes_${confirmId}` },
                { text: "‚ùå –ù—ñ", callback_data: `confirm_no_${confirmId}` },
              ],
            ],
          },
        }
      );

      delete pendingAppointments[chatId];
      return bot.sendMessage(
        chatId,
        "üïê –ó–∞–ø–∏—Ç –Ω–∞ –∑–∞–ø–∏—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞–π—Å—Ç—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
      );
    }

    // –Ü–Ω–∞–∫—à–µ ‚Äî –∑–∞–ø–∏—Å –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    appointments[chatId] = { date, time };
    appointmentsByDateTime[key] = chatId;

    bot.sendMessage(chatId, getText(chatId, "booked", date, time));
    bot.sendMessage(
      process.env.WIFE_CHAT_ID,
      `üì¢ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å: ${userNames[chatId]}\nüìÖ ${date} ‚è∞ ${time}`
    );

    delete pendingAppointments[chatId];
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫—ñ–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id; // –û—Ç—Ä–∏–º—É—î–º–æ chatId –∑ –æ–±'—î–∫—Ç–∞ callback
  const data = query.data;

  if (data.startsWith("confirm_yes_") || data.startsWith("confirm_no_")) {
    const confirmId = data.split("_").slice(2).join("_");
    const {
      chatId: userChatId,
      date,
      time,
    } = pendingConfirmations[confirmId] || {};

    if (!userChatId) {
      return bot.answerCallbackQuery(query.id, {
        text: "‚õîÔ∏è –ó–∞–ø–∏—Å –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
      });
    }

    if (data.startsWith("confirm_yes_")) {
      appointments[userChatId] = { date, time };
      appointmentsByDateTime[`${date}_${time}`] = userChatId;

      bot.sendMessage(userChatId, getText(userChatId, "booked", date, time));
      bot.sendMessage(
        chatId,
        `‚úÖ –ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è ${userNames[userChatId]}`
      );
    } else {
      bot.sendMessage(
        userChatId,
        "‚õîÔ∏è –¶–µ–π —á–∞—Å –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –º–∞–π—Å—Ç—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ —á–∞—Å."
      );
      bot.sendMessage(
        chatId,
        `‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è ${userNames[userChatId]}`
      );
    }

    delete pendingConfirmations[confirmId];
    return bot.answerCallbackQuery(query.id);
  }

  // –Ü–Ω—à–∞ –ª–æ–≥—ñ–∫–∞ callback'—ñ–≤ (–∑–∞–ª–∏—à —è–∫ —î)
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
const sendReminder = (userId, date, time) => {
  bot.sendMessage(
    userId,
    `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞–≤—Ç—Ä–∞ (${date}) —É –≤–∞—Å –∑–∞–ø–∏—Å –æ ${time}.`
  );
};

// –ó–∞–¥–∞—á–∞ cron, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ 10:00
cron.schedule("0 10 * * *", () => {
  const today = new Date();
  today.setDate(today.getDate() + 1); // –ù–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
  const reminderDate = today.toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –¥–µ–Ω—å
  if (bookings[reminderDate]) {
    bookings[reminderDate].forEach((booking) => {
      sendReminder(booking.userId, reminderDate, booking.time);
    });
  }
});
// PORT------------
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –ø—Ä–∞—Ü—é—î.");
});

const PORT = process.env.PORT || 3000;
http
  .createServer((req, res) => {
    res.writeHead(200);
    res.end("Bot is running");
  })
  .listen(PORT);
